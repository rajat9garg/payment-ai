/*
 * This file is generated by jOOQ.
 */
package com.payment.infrastructure.jooq.tables;


import com.payment.infrastructure.jooq.Indexes;
import com.payment.infrastructure.jooq.Keys;
import com.payment.infrastructure.jooq.Public;
import com.payment.infrastructure.jooq.tables.PaymentModes.PaymentModesPath;
import com.payment.infrastructure.jooq.tables.records.TransactionsRecord;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Stores payment transaction details
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Transactions extends TableImpl<TransactionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.transactions</code>
     */
    public static final Transactions TRANSACTIONS = new Transactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionsRecord> getRecordType() {
        return TransactionsRecord.class;
    }

    /**
     * The column <code>public.transactions.id</code>.
     */
    public final TableField<TransactionsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.transactions.idempotency_key</code>. Unique
     * idempotency key for the transaction
     */
    public final TableField<TransactionsRecord, String> IDEMPOTENCY_KEY = createField(DSL.name("idempotency_key"), SQLDataType.VARCHAR(50).nullable(false), this, "Unique idempotency key for the transaction");

    /**
     * The column <code>public.transactions.status</code>. Transaction status
     * (PENDING, SUCCESS, FAILED, CANCELLED)
     */
    public final TableField<TransactionsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(20).nullable(false), this, "Transaction status (PENDING, SUCCESS, FAILED, CANCELLED)");

    /**
     * The column <code>public.transactions.user_id</code>. ID of the user who
     * initiated the transaction
     */
    public final TableField<TransactionsRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(50).nullable(false), this, "ID of the user who initiated the transaction");

    /**
     * The column <code>public.transactions.amount</code>. Transaction amount
     */
    public final TableField<TransactionsRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(19, 4).nullable(false), this, "Transaction amount");

    /**
     * The column <code>public.transactions.currency</code>. Transaction
     * currency (default: INR)
     */
    public final TableField<TransactionsRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.field(DSL.raw("'INR'::character varying"), SQLDataType.VARCHAR)), this, "Transaction currency (default: INR)");

    /**
     * The column <code>public.transactions.payment_mode</code>. Payment mode
     * (e.g., UPI, CREDIT_CARD, DEBIT_CARD)
     */
    public final TableField<TransactionsRecord, String> PAYMENT_MODE = createField(DSL.name("payment_mode"), SQLDataType.VARCHAR(50).nullable(false), this, "Payment mode (e.g., UPI, CREDIT_CARD, DEBIT_CARD)");

    /**
     * The column <code>public.transactions.payment_type</code>. Payment type
     * (e.g., GOOGLE_PAY, VISA, MASTERCARD)
     */
    public final TableField<TransactionsRecord, String> PAYMENT_TYPE = createField(DSL.name("payment_type"), SQLDataType.VARCHAR(50).nullable(false), this, "Payment type (e.g., GOOGLE_PAY, VISA, MASTERCARD)");

    /**
     * The column <code>public.transactions.payment_provider</code>. Payment
     * provider name
     */
    public final TableField<TransactionsRecord, String> PAYMENT_PROVIDER = createField(DSL.name("payment_provider"), SQLDataType.VARCHAR(50).nullable(false), this, "Payment provider name");

    /**
     * The column <code>public.transactions.vendor_transaction_id</code>.
     * Transaction ID from the payment provider
     */
    public final TableField<TransactionsRecord, String> VENDOR_TRANSACTION_ID = createField(DSL.name("vendor_transaction_id"), SQLDataType.VARCHAR(100), this, "Transaction ID from the payment provider");

    /**
     * The column <code>public.transactions.metadata</code>. Additional metadata
     * related to the transaction
     */
    public final TableField<TransactionsRecord, JSONB> METADATA = createField(DSL.name("metadata"), SQLDataType.JSONB, this, "Additional metadata related to the transaction");

    /**
     * The column <code>public.transactions.created_at</code>. Timestamp when
     * the transaction was created
     */
    public final TableField<TransactionsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Timestamp when the transaction was created");

    /**
     * The column <code>public.transactions.updated_at</code>. Timestamp when
     * the transaction was last updated
     */
    public final TableField<TransactionsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Timestamp when the transaction was last updated");

    /**
     * The column <code>public.transactions.version</code>. Version field for
     * optimistic locking
     */
    public final TableField<TransactionsRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "Version field for optimistic locking");

    private Transactions(Name alias, Table<TransactionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Transactions(Name alias, Table<TransactionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Stores payment transaction details"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.transactions</code> table reference
     */
    public Transactions(String alias) {
        this(DSL.name(alias), TRANSACTIONS);
    }

    /**
     * Create an aliased <code>public.transactions</code> table reference
     */
    public Transactions(Name alias) {
        this(alias, TRANSACTIONS);
    }

    /**
     * Create a <code>public.transactions</code> table reference
     */
    public Transactions() {
        this(DSL.name("transactions"), null);
    }

    public <O extends Record> Transactions(Table<O> path, ForeignKey<O, TransactionsRecord> childPath, InverseForeignKey<O, TransactionsRecord> parentPath) {
        super(path, childPath, parentPath, TRANSACTIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TransactionsPath extends Transactions implements Path<TransactionsRecord> {
        public <O extends Record> TransactionsPath(Table<O> path, ForeignKey<O, TransactionsRecord> childPath, InverseForeignKey<O, TransactionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TransactionsPath(Name alias, Table<TransactionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TransactionsPath as(String alias) {
            return new TransactionsPath(DSL.name(alias), this);
        }

        @Override
        public TransactionsPath as(Name alias) {
            return new TransactionsPath(alias, this);
        }

        @Override
        public TransactionsPath as(Table<?> alias) {
            return new TransactionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TRANSACTIONS_CREATED_AT, Indexes.IDX_TRANSACTIONS_IDEMPOTENCY_KEY, Indexes.IDX_TRANSACTIONS_STATUS, Indexes.IDX_TRANSACTIONS_USER_ID);
    }

    @Override
    public Identity<TransactionsRecord, Long> getIdentity() {
        return (Identity<TransactionsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransactionsRecord> getPrimaryKey() {
        return Keys.TRANSACTIONS_PKEY;
    }

    @Override
    public List<UniqueKey<TransactionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TRANSACTIONS_IDEMPOTENCY_KEY_KEY);
    }

    @Override
    public List<ForeignKey<TransactionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACTIONS__FK_PAYMENT_MODE);
    }

    private transient PaymentModesPath _paymentModes;

    /**
     * Get the implicit join path to the <code>public.payment_modes</code>
     * table.
     */
    public PaymentModesPath paymentModes() {
        if (_paymentModes == null)
            _paymentModes = new PaymentModesPath(this, Keys.TRANSACTIONS__FK_PAYMENT_MODE, null);

        return _paymentModes;
    }

    @Override
    public TableField<TransactionsRecord, Long> getRecordVersion() {
        return VERSION;
    }

    @Override
    public TableField<TransactionsRecord, OffsetDateTime> getRecordTimestamp() {
        return CREATED_AT;
    }

    @Override
    public Transactions as(String alias) {
        return new Transactions(DSL.name(alias), this);
    }

    @Override
    public Transactions as(Name alias) {
        return new Transactions(alias, this);
    }

    @Override
    public Transactions as(Table<?> alias) {
        return new Transactions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(String name) {
        return new Transactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Name name) {
        return new Transactions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Table<?> name) {
        return new Transactions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions where(Condition condition) {
        return new Transactions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transactions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transactions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transactions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transactions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, String, String, String, BigDecimal, String, String, String, String, String, JSONB, OffsetDateTime, OffsetDateTime, Long> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Long, ? super String, ? super String, ? super String, ? super BigDecimal, ? super String, ? super String, ? super String, ? super String, ? super String, ? super JSONB, ? super OffsetDateTime, ? super OffsetDateTime, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Long, ? super String, ? super String, ? super String, ? super BigDecimal, ? super String, ? super String, ? super String, ? super String, ? super String, ? super JSONB, ? super OffsetDateTime, ? super OffsetDateTime, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
