/*
 * This file is generated by jOOQ.
 */
package com.payment.infrastructure.jooq.tables;


import com.payment.infrastructure.jooq.Keys;
import com.payment.infrastructure.jooq.Public;
import com.payment.infrastructure.jooq.tables.PaymentTypes.PaymentTypesPath;
import com.payment.infrastructure.jooq.tables.Transactions.TransactionsPath;
import com.payment.infrastructure.jooq.tables.records.PaymentModesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PaymentModes extends TableImpl<PaymentModesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.payment_modes</code>
     */
    public static final PaymentModes PAYMENT_MODES = new PaymentModes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentModesRecord> getRecordType() {
        return PaymentModesRecord.class;
    }

    /**
     * The column <code>public.payment_modes.id</code>.
     */
    public final TableField<PaymentModesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.payment_modes.mode_code</code>.
     */
    public final TableField<PaymentModesRecord, String> MODE_CODE = createField(DSL.name("mode_code"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.payment_modes.mode_name</code>.
     */
    public final TableField<PaymentModesRecord, String> MODE_NAME = createField(DSL.name("mode_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.payment_modes.description</code>.
     */
    public final TableField<PaymentModesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.payment_modes.is_active</code>.
     */
    public final TableField<PaymentModesRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.payment_modes.created_at</code>.
     */
    public final TableField<PaymentModesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.payment_modes.updated_at</code>.
     */
    public final TableField<PaymentModesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private PaymentModes(Name alias, Table<PaymentModesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PaymentModes(Name alias, Table<PaymentModesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.payment_modes</code> table reference
     */
    public PaymentModes(String alias) {
        this(DSL.name(alias), PAYMENT_MODES);
    }

    /**
     * Create an aliased <code>public.payment_modes</code> table reference
     */
    public PaymentModes(Name alias) {
        this(alias, PAYMENT_MODES);
    }

    /**
     * Create a <code>public.payment_modes</code> table reference
     */
    public PaymentModes() {
        this(DSL.name("payment_modes"), null);
    }

    public <O extends Record> PaymentModes(Table<O> path, ForeignKey<O, PaymentModesRecord> childPath, InverseForeignKey<O, PaymentModesRecord> parentPath) {
        super(path, childPath, parentPath, PAYMENT_MODES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PaymentModesPath extends PaymentModes implements Path<PaymentModesRecord> {
        public <O extends Record> PaymentModesPath(Table<O> path, ForeignKey<O, PaymentModesRecord> childPath, InverseForeignKey<O, PaymentModesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PaymentModesPath(Name alias, Table<PaymentModesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PaymentModesPath as(String alias) {
            return new PaymentModesPath(DSL.name(alias), this);
        }

        @Override
        public PaymentModesPath as(Name alias) {
            return new PaymentModesPath(alias, this);
        }

        @Override
        public PaymentModesPath as(Table<?> alias) {
            return new PaymentModesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PaymentModesRecord, Integer> getIdentity() {
        return (Identity<PaymentModesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PaymentModesRecord> getPrimaryKey() {
        return Keys.PAYMENT_MODES_PKEY;
    }

    @Override
    public List<UniqueKey<PaymentModesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PAYMENT_MODES_MODE_CODE_KEY);
    }

    private transient PaymentTypesPath _paymentTypes;

    /**
     * Get the implicit to-many join path to the
     * <code>public.payment_types</code> table
     */
    public PaymentTypesPath paymentTypes() {
        if (_paymentTypes == null)
            _paymentTypes = new PaymentTypesPath(this, null, Keys.PAYMENT_TYPES__PAYMENT_TYPES_MODE_ID_FKEY.getInverseKey());

        return _paymentTypes;
    }

    private transient TransactionsPath _transactions;

    /**
     * Get the implicit to-many join path to the
     * <code>public.transactions</code> table
     */
    public TransactionsPath transactions() {
        if (_transactions == null)
            _transactions = new TransactionsPath(this, null, Keys.TRANSACTIONS__FK_PAYMENT_MODE.getInverseKey());

        return _transactions;
    }

    @Override
    public TableField<PaymentModesRecord, LocalDateTime> getRecordTimestamp() {
        return CREATED_AT;
    }

    @Override
    public PaymentModes as(String alias) {
        return new PaymentModes(DSL.name(alias), this);
    }

    @Override
    public PaymentModes as(Name alias) {
        return new PaymentModes(alias, this);
    }

    @Override
    public PaymentModes as(Table<?> alias) {
        return new PaymentModes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentModes rename(String name) {
        return new PaymentModes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentModes rename(Name name) {
        return new PaymentModes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentModes rename(Table<?> name) {
        return new PaymentModes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PaymentModes where(Condition condition) {
        return new PaymentModes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PaymentModes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PaymentModes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PaymentModes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PaymentModes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PaymentModes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PaymentModes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PaymentModes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PaymentModes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PaymentModes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, Boolean, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super String, ? super String, ? super String, ? super Boolean, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super String, ? super String, ? super String, ? super Boolean, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
