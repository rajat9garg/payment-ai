/*
 * This file is generated by jOOQ.
 */
package com.payment.infrastructure.jooq.tables.records;


import com.payment.infrastructure.jooq.tables.Transactions;

import java.math.BigDecimal;
import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Stores payment transaction details
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TransactionsRecord extends UpdatableRecordImpl<TransactionsRecord> implements Record14<Long, String, String, String, BigDecimal, String, String, String, String, String, JSONB, OffsetDateTime, OffsetDateTime, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.transactions.id</code>.
     */
    public TransactionsRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.transactions.idempotency_key</code>. Unique
     * idempotency key for the transaction
     */
    public TransactionsRecord setIdempotencyKey(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.idempotency_key</code>. Unique
     * idempotency key for the transaction
     */
    public String getIdempotencyKey() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.transactions.status</code>. Transaction status
     * (PENDING, SUCCESS, FAILED, CANCELLED)
     */
    public TransactionsRecord setStatus(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.status</code>. Transaction status
     * (PENDING, SUCCESS, FAILED, CANCELLED)
     */
    public String getStatus() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.transactions.user_id</code>. ID of the user who
     * initiated the transaction
     */
    public TransactionsRecord setUserId(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.user_id</code>. ID of the user who
     * initiated the transaction
     */
    public String getUserId() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.transactions.amount</code>. Transaction amount
     */
    public TransactionsRecord setAmount(BigDecimal value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.amount</code>. Transaction amount
     */
    public BigDecimal getAmount() {
        return (BigDecimal) get(4);
    }

    /**
     * Setter for <code>public.transactions.currency</code>. Transaction
     * currency (default: INR)
     */
    public TransactionsRecord setCurrency(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.currency</code>. Transaction
     * currency (default: INR)
     */
    public String getCurrency() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.transactions.payment_mode</code>. Payment mode
     * (e.g., UPI, CREDIT_CARD, DEBIT_CARD)
     */
    public TransactionsRecord setPaymentMode(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.payment_mode</code>. Payment mode
     * (e.g., UPI, CREDIT_CARD, DEBIT_CARD)
     */
    public String getPaymentMode() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.transactions.payment_type</code>. Payment type
     * (e.g., GOOGLE_PAY, VISA, MASTERCARD)
     */
    public TransactionsRecord setPaymentType(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.payment_type</code>. Payment type
     * (e.g., GOOGLE_PAY, VISA, MASTERCARD)
     */
    public String getPaymentType() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.transactions.payment_provider</code>. Payment
     * provider name
     */
    public TransactionsRecord setPaymentProvider(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.payment_provider</code>. Payment
     * provider name
     */
    public String getPaymentProvider() {
        return (String) get(8);
    }

    /**
     * Setter for <code>public.transactions.vendor_transaction_id</code>.
     * Transaction ID from the payment provider
     */
    public TransactionsRecord setVendorTransactionId(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.vendor_transaction_id</code>.
     * Transaction ID from the payment provider
     */
    public String getVendorTransactionId() {
        return (String) get(9);
    }

    /**
     * Setter for <code>public.transactions.metadata</code>. Additional metadata
     * related to the transaction
     */
    public TransactionsRecord setMetadata(JSONB value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.metadata</code>. Additional metadata
     * related to the transaction
     */
    public JSONB getMetadata() {
        return (JSONB) get(10);
    }

    /**
     * Setter for <code>public.transactions.created_at</code>. Timestamp when
     * the transaction was created
     */
    public TransactionsRecord setCreatedAt(OffsetDateTime value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.created_at</code>. Timestamp when
     * the transaction was created
     */
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(11);
    }

    /**
     * Setter for <code>public.transactions.updated_at</code>. Timestamp when
     * the transaction was last updated
     */
    public TransactionsRecord setUpdatedAt(OffsetDateTime value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.updated_at</code>. Timestamp when
     * the transaction was last updated
     */
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(12);
    }

    /**
     * Setter for <code>public.transactions.version</code>. Version field for
     * optimistic locking
     */
    public TransactionsRecord setVersion(Long value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.version</code>. Version field for
     * optimistic locking
     */
    public Long getVersion() {
        return (Long) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, String, String, String, BigDecimal, String, String, String, String, String, JSONB, OffsetDateTime, OffsetDateTime, Long> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<Long, String, String, String, BigDecimal, String, String, String, String, String, JSONB, OffsetDateTime, OffsetDateTime, Long> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Transactions.TRANSACTIONS.ID;
    }

    @Override
    public Field<String> field2() {
        return Transactions.TRANSACTIONS.IDEMPOTENCY_KEY;
    }

    @Override
    public Field<String> field3() {
        return Transactions.TRANSACTIONS.STATUS;
    }

    @Override
    public Field<String> field4() {
        return Transactions.TRANSACTIONS.USER_ID;
    }

    @Override
    public Field<BigDecimal> field5() {
        return Transactions.TRANSACTIONS.AMOUNT;
    }

    @Override
    public Field<String> field6() {
        return Transactions.TRANSACTIONS.CURRENCY;
    }

    @Override
    public Field<String> field7() {
        return Transactions.TRANSACTIONS.PAYMENT_MODE;
    }

    @Override
    public Field<String> field8() {
        return Transactions.TRANSACTIONS.PAYMENT_TYPE;
    }

    @Override
    public Field<String> field9() {
        return Transactions.TRANSACTIONS.PAYMENT_PROVIDER;
    }

    @Override
    public Field<String> field10() {
        return Transactions.TRANSACTIONS.VENDOR_TRANSACTION_ID;
    }

    @Override
    public Field<JSONB> field11() {
        return Transactions.TRANSACTIONS.METADATA;
    }

    @Override
    public Field<OffsetDateTime> field12() {
        return Transactions.TRANSACTIONS.CREATED_AT;
    }

    @Override
    public Field<OffsetDateTime> field13() {
        return Transactions.TRANSACTIONS.UPDATED_AT;
    }

    @Override
    public Field<Long> field14() {
        return Transactions.TRANSACTIONS.VERSION;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getIdempotencyKey();
    }

    @Override
    public String component3() {
        return getStatus();
    }

    @Override
    public String component4() {
        return getUserId();
    }

    @Override
    public BigDecimal component5() {
        return getAmount();
    }

    @Override
    public String component6() {
        return getCurrency();
    }

    @Override
    public String component7() {
        return getPaymentMode();
    }

    @Override
    public String component8() {
        return getPaymentType();
    }

    @Override
    public String component9() {
        return getPaymentProvider();
    }

    @Override
    public String component10() {
        return getVendorTransactionId();
    }

    @Override
    public JSONB component11() {
        return getMetadata();
    }

    @Override
    public OffsetDateTime component12() {
        return getCreatedAt();
    }

    @Override
    public OffsetDateTime component13() {
        return getUpdatedAt();
    }

    @Override
    public Long component14() {
        return getVersion();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getIdempotencyKey();
    }

    @Override
    public String value3() {
        return getStatus();
    }

    @Override
    public String value4() {
        return getUserId();
    }

    @Override
    public BigDecimal value5() {
        return getAmount();
    }

    @Override
    public String value6() {
        return getCurrency();
    }

    @Override
    public String value7() {
        return getPaymentMode();
    }

    @Override
    public String value8() {
        return getPaymentType();
    }

    @Override
    public String value9() {
        return getPaymentProvider();
    }

    @Override
    public String value10() {
        return getVendorTransactionId();
    }

    @Override
    public JSONB value11() {
        return getMetadata();
    }

    @Override
    public OffsetDateTime value12() {
        return getCreatedAt();
    }

    @Override
    public OffsetDateTime value13() {
        return getUpdatedAt();
    }

    @Override
    public Long value14() {
        return getVersion();
    }

    @Override
    public TransactionsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TransactionsRecord value2(String value) {
        setIdempotencyKey(value);
        return this;
    }

    @Override
    public TransactionsRecord value3(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public TransactionsRecord value4(String value) {
        setUserId(value);
        return this;
    }

    @Override
    public TransactionsRecord value5(BigDecimal value) {
        setAmount(value);
        return this;
    }

    @Override
    public TransactionsRecord value6(String value) {
        setCurrency(value);
        return this;
    }

    @Override
    public TransactionsRecord value7(String value) {
        setPaymentMode(value);
        return this;
    }

    @Override
    public TransactionsRecord value8(String value) {
        setPaymentType(value);
        return this;
    }

    @Override
    public TransactionsRecord value9(String value) {
        setPaymentProvider(value);
        return this;
    }

    @Override
    public TransactionsRecord value10(String value) {
        setVendorTransactionId(value);
        return this;
    }

    @Override
    public TransactionsRecord value11(JSONB value) {
        setMetadata(value);
        return this;
    }

    @Override
    public TransactionsRecord value12(OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public TransactionsRecord value13(OffsetDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public TransactionsRecord value14(Long value) {
        setVersion(value);
        return this;
    }

    @Override
    public TransactionsRecord values(Long value1, String value2, String value3, String value4, BigDecimal value5, String value6, String value7, String value8, String value9, String value10, JSONB value11, OffsetDateTime value12, OffsetDateTime value13, Long value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TransactionsRecord
     */
    public TransactionsRecord() {
        super(Transactions.TRANSACTIONS);
    }

    /**
     * Create a detached, initialised TransactionsRecord
     */
    public TransactionsRecord(Long id, String idempotencyKey, String status, String userId, BigDecimal amount, String currency, String paymentMode, String paymentType, String paymentProvider, String vendorTransactionId, JSONB metadata, OffsetDateTime createdAt, OffsetDateTime updatedAt, Long version) {
        super(Transactions.TRANSACTIONS);

        setId(id);
        setIdempotencyKey(idempotencyKey);
        setStatus(status);
        setUserId(userId);
        setAmount(amount);
        setCurrency(currency);
        setPaymentMode(paymentMode);
        setPaymentType(paymentType);
        setPaymentProvider(paymentProvider);
        setVendorTransactionId(vendorTransactionId);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setVersion(version);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TransactionsRecord
     */
    public TransactionsRecord(com.payment.infrastructure.jooq.tables.pojos.Transactions value) {
        super(Transactions.TRANSACTIONS);

        if (value != null) {
            setId(value.getId());
            setIdempotencyKey(value.getIdempotencyKey());
            setStatus(value.getStatus());
            setUserId(value.getUserId());
            setAmount(value.getAmount());
            setCurrency(value.getCurrency());
            setPaymentMode(value.getPaymentMode());
            setPaymentType(value.getPaymentType());
            setPaymentProvider(value.getPaymentProvider());
            setVendorTransactionId(value.getVendorTransactionId());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            setVersion(value.getVersion());
            resetChangedOnNotNull();
        }
    }
}
