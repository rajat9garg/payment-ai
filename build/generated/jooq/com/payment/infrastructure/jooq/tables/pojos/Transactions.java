/*
 * This file is generated by jOOQ.
 */
package com.payment.infrastructure.jooq.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;
import java.time.OffsetDateTime;

import org.jooq.JSONB;


/**
 * Stores payment transaction details
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Transactions implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final String idempotencyKey;
    private final String status;
    private final String userId;
    private final BigDecimal amount;
    private final String currency;
    private final String paymentMode;
    private final String paymentType;
    private final String paymentProvider;
    private final String vendorTransactionId;
    private final JSONB metadata;
    private final OffsetDateTime createdAt;
    private final OffsetDateTime updatedAt;
    private final Long version;

    public Transactions(Transactions value) {
        this.id = value.id;
        this.idempotencyKey = value.idempotencyKey;
        this.status = value.status;
        this.userId = value.userId;
        this.amount = value.amount;
        this.currency = value.currency;
        this.paymentMode = value.paymentMode;
        this.paymentType = value.paymentType;
        this.paymentProvider = value.paymentProvider;
        this.vendorTransactionId = value.vendorTransactionId;
        this.metadata = value.metadata;
        this.createdAt = value.createdAt;
        this.updatedAt = value.updatedAt;
        this.version = value.version;
    }

    public Transactions(
        Long id,
        String idempotencyKey,
        String status,
        String userId,
        BigDecimal amount,
        String currency,
        String paymentMode,
        String paymentType,
        String paymentProvider,
        String vendorTransactionId,
        JSONB metadata,
        OffsetDateTime createdAt,
        OffsetDateTime updatedAt,
        Long version
    ) {
        this.id = id;
        this.idempotencyKey = idempotencyKey;
        this.status = status;
        this.userId = userId;
        this.amount = amount;
        this.currency = currency;
        this.paymentMode = paymentMode;
        this.paymentType = paymentType;
        this.paymentProvider = paymentProvider;
        this.vendorTransactionId = vendorTransactionId;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.version = version;
    }

    /**
     * Getter for <code>public.transactions.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>public.transactions.idempotency_key</code>. Unique
     * idempotency key for the transaction
     */
    public String getIdempotencyKey() {
        return this.idempotencyKey;
    }

    /**
     * Getter for <code>public.transactions.status</code>. Transaction status
     * (PENDING, SUCCESS, FAILED, CANCELLED)
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Getter for <code>public.transactions.user_id</code>. ID of the user who
     * initiated the transaction
     */
    public String getUserId() {
        return this.userId;
    }

    /**
     * Getter for <code>public.transactions.amount</code>. Transaction amount
     */
    public BigDecimal getAmount() {
        return this.amount;
    }

    /**
     * Getter for <code>public.transactions.currency</code>. Transaction
     * currency (default: INR)
     */
    public String getCurrency() {
        return this.currency;
    }

    /**
     * Getter for <code>public.transactions.payment_mode</code>. Payment mode
     * (e.g., UPI, CREDIT_CARD, DEBIT_CARD)
     */
    public String getPaymentMode() {
        return this.paymentMode;
    }

    /**
     * Getter for <code>public.transactions.payment_type</code>. Payment type
     * (e.g., GOOGLE_PAY, VISA, MASTERCARD)
     */
    public String getPaymentType() {
        return this.paymentType;
    }

    /**
     * Getter for <code>public.transactions.payment_provider</code>. Payment
     * provider name
     */
    public String getPaymentProvider() {
        return this.paymentProvider;
    }

    /**
     * Getter for <code>public.transactions.vendor_transaction_id</code>.
     * Transaction ID from the payment provider
     */
    public String getVendorTransactionId() {
        return this.vendorTransactionId;
    }

    /**
     * Getter for <code>public.transactions.metadata</code>. Additional metadata
     * related to the transaction
     */
    public JSONB getMetadata() {
        return this.metadata;
    }

    /**
     * Getter for <code>public.transactions.created_at</code>. Timestamp when
     * the transaction was created
     */
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Getter for <code>public.transactions.updated_at</code>. Timestamp when
     * the transaction was last updated
     */
    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Getter for <code>public.transactions.version</code>. Version field for
     * optimistic locking
     */
    public Long getVersion() {
        return this.version;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Transactions (");

        sb.append(id);
        sb.append(", ").append(idempotencyKey);
        sb.append(", ").append(status);
        sb.append(", ").append(userId);
        sb.append(", ").append(amount);
        sb.append(", ").append(currency);
        sb.append(", ").append(paymentMode);
        sb.append(", ").append(paymentType);
        sb.append(", ").append(paymentProvider);
        sb.append(", ").append(vendorTransactionId);
        sb.append(", ").append(metadata);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(version);

        sb.append(")");
        return sb.toString();
    }
}
