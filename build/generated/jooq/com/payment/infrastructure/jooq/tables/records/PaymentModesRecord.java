/*
 * This file is generated by jOOQ.
 */
package com.payment.infrastructure.jooq.tables.records;


import com.payment.infrastructure.jooq.tables.PaymentModes;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PaymentModesRecord extends UpdatableRecordImpl<PaymentModesRecord> implements Record7<Integer, String, String, String, Boolean, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.payment_modes.id</code>.
     */
    public PaymentModesRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.payment_modes.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.payment_modes.mode_code</code>.
     */
    public PaymentModesRecord setModeCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.payment_modes.mode_code</code>.
     */
    public String getModeCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.payment_modes.mode_name</code>.
     */
    public PaymentModesRecord setModeName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.payment_modes.mode_name</code>.
     */
    public String getModeName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.payment_modes.description</code>.
     */
    public PaymentModesRecord setDescription(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.payment_modes.description</code>.
     */
    public String getDescription() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.payment_modes.is_active</code>.
     */
    public PaymentModesRecord setIsActive(Boolean value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.payment_modes.is_active</code>.
     */
    public Boolean getIsActive() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>public.payment_modes.created_at</code>.
     */
    public PaymentModesRecord setCreatedAt(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.payment_modes.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>public.payment_modes.updated_at</code>.
     */
    public PaymentModesRecord setUpdatedAt(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.payment_modes.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, Boolean, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, String, String, String, Boolean, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return PaymentModes.PAYMENT_MODES.ID;
    }

    @Override
    public Field<String> field2() {
        return PaymentModes.PAYMENT_MODES.MODE_CODE;
    }

    @Override
    public Field<String> field3() {
        return PaymentModes.PAYMENT_MODES.MODE_NAME;
    }

    @Override
    public Field<String> field4() {
        return PaymentModes.PAYMENT_MODES.DESCRIPTION;
    }

    @Override
    public Field<Boolean> field5() {
        return PaymentModes.PAYMENT_MODES.IS_ACTIVE;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return PaymentModes.PAYMENT_MODES.CREATED_AT;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return PaymentModes.PAYMENT_MODES.UPDATED_AT;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getModeCode();
    }

    @Override
    public String component3() {
        return getModeName();
    }

    @Override
    public String component4() {
        return getDescription();
    }

    @Override
    public Boolean component5() {
        return getIsActive();
    }

    @Override
    public LocalDateTime component6() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime component7() {
        return getUpdatedAt();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getModeCode();
    }

    @Override
    public String value3() {
        return getModeName();
    }

    @Override
    public String value4() {
        return getDescription();
    }

    @Override
    public Boolean value5() {
        return getIsActive();
    }

    @Override
    public LocalDateTime value6() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime value7() {
        return getUpdatedAt();
    }

    @Override
    public PaymentModesRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public PaymentModesRecord value2(String value) {
        setModeCode(value);
        return this;
    }

    @Override
    public PaymentModesRecord value3(String value) {
        setModeName(value);
        return this;
    }

    @Override
    public PaymentModesRecord value4(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public PaymentModesRecord value5(Boolean value) {
        setIsActive(value);
        return this;
    }

    @Override
    public PaymentModesRecord value6(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public PaymentModesRecord value7(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public PaymentModesRecord values(Integer value1, String value2, String value3, String value4, Boolean value5, LocalDateTime value6, LocalDateTime value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PaymentModesRecord
     */
    public PaymentModesRecord() {
        super(PaymentModes.PAYMENT_MODES);
    }

    /**
     * Create a detached, initialised PaymentModesRecord
     */
    public PaymentModesRecord(Integer id, String modeCode, String modeName, String description, Boolean isActive, LocalDateTime createdAt, LocalDateTime updatedAt) {
        super(PaymentModes.PAYMENT_MODES);

        setId(id);
        setModeCode(modeCode);
        setModeName(modeName);
        setDescription(description);
        setIsActive(isActive);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PaymentModesRecord
     */
    public PaymentModesRecord(com.payment.infrastructure.jooq.tables.pojos.PaymentModes value) {
        super(PaymentModes.PAYMENT_MODES);

        if (value != null) {
            setId(value.getId());
            setModeCode(value.getModeCode());
            setModeName(value.getModeName());
            setDescription(value.getDescription());
            setIsActive(value.getIsActive());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            resetChangedOnNotNull();
        }
    }
}
